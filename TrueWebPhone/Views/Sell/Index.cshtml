@model IEnumerable<TrueWebPhone.Models.Product>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"]</title>
    <style>

        body, h1, h2, p, ul {
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
            line-height: 1.6;
            color: #333;
            margin: 0;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        header {
            background-color: #333;
            color: white;
            padding: 20px 0;
            text-align: center;
        }

            header h1 {
                font-size: 2em;
                margin-bottom: 10px;
            }

        main {
            flex: 1;
            display: flex;
            justify-content: space-evenly;
            align-items: flex-start;
            padding: 20px;
            flex-wrap: wrap;
            padding-bottom: 60px;
        }

        #product, #cart {
            background-color: #fff;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            margin: 10px;
            max-width: calc(50% - 20px);
            width: 400px;
        }

        #product-list {
            max-height: 400px;
            overflow-y: auto;
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            grid-gap: 20px;
        }

        #product {
            width: 60%;
            background-color: #fff;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        #cart {
            width: 35%;
            background-color: #fff;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
        }

        #product-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); /* Responsive grid */
            gap: 20px;
        }

        .product-item {
            text-align: center;
            border: 1px solid #ccc;
            padding: 10px;
            border-radius: 8px;
            transition: transform 0.3s ease-in-out;
        }

            .product-item:hover {
                transform: scale(1.05);
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            }

        img {
            max-width: 100%;
            height: auto;
            border-radius: 8px;
        }


        button {
            background-color: #28a745;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 16px;
            margin-top: 10px;
        }

            button:hover {
                background-color: #218838;
            }

        #cart-details {
            border-top: 1px solid #ccc;
            margin-top: 20px;
            padding-top: 20px;
            max-height: 300px;
            overflow-y: auto;
        }

        .cart-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            border-bottom: 1px solid #ccc;
            padding: 10px 0;
        }

            .cart-item img {
                max-width: 50px;
                height: auto;
                margin-right: 10px;
                border-radius: 4px;
            }

        .delete-icon {
            cursor: pointer;
            cursor: pointer;
            display: inline-block;
            background-color: #ff3333;
            color: white;
            padding: 8px;
            border-radius: 50%;
        }

        .cart-total {
            margin-top: 10px;
            font-weight: bold;
        }

        footer {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: #333;
            color: white;
            text-align: center;
            padding: 20px 0;
            z-index: 999; /* Ensure the footer stays on top */
        }

        #total-items-text {
            margin-top: 10px;
        }

        .flex-row {
            margin-top: 10px;
            display: flex;
            justify-content: space-between;
        }

        .text-start {
            order: 1;
        }

        .text-end {
            order: 2;
        }
    </style>
</head>
<body>

    <main>
        <div id="product">
            <h2>Product List</h2>
            <div id="product-list">
                @foreach (var product in Model)
                {
                    <div class="product-item" data-product-id="@product.Id">
                        <img src="~/uploads/@product.ImagePath" alt="@product.ProductName">
                        <p>@product.ProductName - $@product.RetailPrice.ToString("0.##")</p>
                        <button class="add-to-cart-btn">Add to Cart</button>
                    </div>
                }
            </div>
        </div>

        <div id="cart">
            <h2>Shopping Cart</h2>

            <div id="cart-details" style="height:300px">
                <!-- Cart details will be displayed here -->
            </div>

            <div class="flex-row">
                <p id="total-items-text">Total Items: 0</p>
                <p id="total-price-text">Total Price: $0.00</p>
            </div>
            <div class="flex-row">
                <label for="customer-payment">Customer Payment:</label>
                <input type="text" id="customer-payment" name="customer-payment" placeholder="Enter amount">
            </div>
            <div class="flex-row">
                <p id="change-output">Customer's Change: $0.00</p>
            </div>
            <button type="button" class="btn btn-primary" id="openCustomerModalBtn">
                Make a payment
            </button>
            <button id="reset-cart-btn" type="button" class="btn btn-success">Reset Cart</button>

        </div>

    </main>

    <footer>
    </footer>
    <div class="modal fade" id="customerModal" tabindex="-1" role="dialog" aria-labelledby="customerModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="customerModalLabel">Filling Information of Customer</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="checkoutForm" method="post">
                        <div class="row">
                            <div class="col">
                                <label>Phone number</label>
                                <input type="text" class="form-control" id="phone" placeholder="Enter phone's customer" name="phone" />
                                <button type="submit" class="my-2 btn btn-primary">Checkout <i class="fa-solid fa-check-to-slot"></i></button>
                            </div>
                            <div class="col">
                                <label>Full name</label>
                                <input type="text" class="form-control" placeholder="Enter customer's name" id="fullname" name="fullname" />
                            </div>
                        </div>
                        <div class="row my-2">
                            <div class="col">
                                <label>Address</label>
                                <input type="text" class="form-control" placeholder="Enter customer's address" id="address" name="address" />
                            </div>
                        </div>
                        <div class="row my-2">
                            <div class="col">
                                <label for="payment-method">Payment Method:</label>
                                <select class="form-control" id="payment-method" name="payment-method">
                                    <option value="cash">Cash</option>
                                    <option value="visa">Visa</option>
                                    <option value="momo">Momo</option>
                                </select>
                            </div>
                        </div>
                    </form>

                    <div id="messageContainer" class="mt-3"></div>

                    <div id="existingCustomerInfo" style="display:none;">
                        <p>Customer with the provided phone number already exists.</p>
                        <p>Name: <span id="existingName"></span></p>
                        <p>Address: <span id="existingAddress"></span></p>
                    </div>

                    <button id="addNewCustomer" class="btn btn-success mt-3">Add New Customer</button>
                    <button class="btn btn-success mt-3" id="checkout-btn">Pay</button>
                    <button class="btn btn-success mt-3" id="reset-customer-btn">Reset Customer</button>


                    <div class="modal fade" id="invoiceModal" tabindex="-1" role="dialog" aria-labelledby="invoiceModalLabel" aria-hidden="true">
                        <div class="modal-dialog" role="document">
                            <div class="modal-content">
                                <div class="modal-header">
                                    <h5 class="modal-title" id="invoiceModalLabel">Invoice Details</h5>
                                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                                        <span aria-hidden="true">&times;</span>
                                    </button>
                                </div>
                                <div class="modal-body">
                                    <p><strong>Customer Name:</strong> <span id="customerName"></span></p>
                                    <p><strong>Customer Phone:</strong> <span id="customerPhone"></span></p>
                                    <p><strong>Customer Address:</strong> <span id="customerAddress"></span></p>
                                    <p><strong>Staff Name:</strong> <span id="staffName"></span></p>
                                    <h4>Order Details</h4>
                                    <table class="table" id="orderDetailsTable">
                                        <thead>
                                            <tr>
                                                <th>Product Name</th>
                                                <th>Quantity</th>
                                                <th>Total Price</th>
                                            </tr>
                                        </thead>
                                        <tbody></tbody>
                                    </table>
                                    <button id="download-pdf-btn" class="btn btn-primary">Download as PDF</button>
                                </div>
                            </div>
                        </div>
                    </div>

</body>
</html>
<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://rawgit.com/eKoopmans/html2pdf/master/dist/html2pdf.bundle.js"></script>
<script src="https://unpkg.com/html2pdf.js"></script>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"
        integrity="sha512-qZvrmS2ekKPF2mSznTQsxqPgnpkI4DNTlrdUmTzrDgektczlKNRRhy5X5AAOnx5S09ydFYWWNSfcEqDTTHgtNA=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.3.2/jspdf.debug.js"></script>
<script>
    function displayInvoiceModal(invoiceDetails) {
        $("#customerName").text(invoiceDetails.customerName);
        $("#customerPhone").text(invoiceDetails.customerPhone);
        $("#customerAddress").text(invoiceDetails.customerAddress);
        $("#staffName").text(invoiceDetails.staffName);

        var orderDetailsHtml = "";
        for (var i = 0; i < invoiceDetails.orderDetails.length; i++) {
            var orderDetail = invoiceDetails.orderDetails[i];
            orderDetailsHtml += '<tr>' +
                '<td>' + orderDetail.productName + '</td>' +
                '<td>' + orderDetail.quantity + '</td>' +
                '<td>' + orderDetail.totalPrice.toFixed(2) + '</td>' +
                '</tr>';
        }
        $("#orderDetailsTable tbody").html(orderDetailsHtml);

        $("#invoiceModal").modal("show").on('shown.bs.modal', function () {
            $("#download-pdf-btn").on("click", function () {
                downloadPDF(invoiceDetails, function () {
                    $("#invoiceModal").modal("hide");
                });
            });
        });
    }

    function downloadPDF(invoiceDetails) {
        if (!invoiceDetails || !invoiceDetails.orderDetails) {
            console.error('OrderDetails is undefined or null in invoiceDetails.');
            return;
        }

        var pdfDoc = new jsPDF();

        var currentDate = new Date().toLocaleDateString();
        var currentTime = new Date().toLocaleTimeString();

        pdfDoc.text(`Date: ${currentDate}`, 10, 10);
        pdfDoc.text(`Time: ${currentTime}`, 10, 20);
        pdfDoc.text(`Customer Name: ${invoiceDetails.customerName}`, 10, 30);
        pdfDoc.text(`Customer Phone: ${invoiceDetails.customerPhone}`, 10, 40);
        pdfDoc.text(`Customer Address: ${invoiceDetails.customerAddress}`, 10, 50);
        pdfDoc.text(`Staff Name: ${invoiceDetails.staffName}`, 10, 60);
        pdfDoc.text('Order Details', 10, 80);

        var yPosition = 90;
        for (var i = 0; i < invoiceDetails.orderDetails.length; i++) {
            var orderDetail = invoiceDetails.orderDetails[i];
            pdfDoc.text(orderDetail.productName, 10, yPosition);
            pdfDoc.text(`Quantity: ${orderDetail.quantity}`, 80, yPosition);
            pdfDoc.text(`Total Price: $${orderDetail.totalPrice.toFixed(2)}`, 120, yPosition);
            yPosition += 20;
        }

        var totalAmount = invoiceDetails.orderDetails.reduce((total, item) => total + item.totalPrice, 0);
        var customerPayment = parseFloat($("#customer-payment").val()) || 0;
        var change = customerPayment - totalAmount;

        pdfDoc.text(`Total Amount: $${totalAmount.toFixed(2)}`, 10, yPosition + 20);
        pdfDoc.text(`Customer Payment: $${customerPayment.toFixed(2)}`, 10, yPosition + 30);
        pdfDoc.text(`Change: $${change.toFixed(2)}`, 10, yPosition + 40);

        pdfDoc.save('invoice.pdf');
    }






    $(document).ready(function () {

        $("#openCustomerModalBtn").on("click", function () {
            $("#customerModal").modal("show");
        });

        $("#reset-cart-btn").on("click", function () {
            $("#cart-details").empty();
            updateCartTotals();
        });

        $("#reset-customer-btn").on("click", function () {
            $("#checkoutForm")[0].reset();
            $("#messageContainer").empty();
            $("#existingCustomerInfo").hide();
        });
        function calculateChange() {
            // Get the total price
            var totalPrice = parseFloat($("#total-price-text").text().replace('Total Price: $', ''));

            // Get the customer payment and convert it to a number
            var customerPayment = parseFloat($("#customer-payment").val());

            // Calculate the change
            var change = customerPayment - totalPrice;

            // Display the change in the console or wherever you want to show it
            console.log("Customer's Change: $" + change.toFixed(2));

            // You can display the change in a specific element if needed
            // Example:
            $("#change-output").text("Customer's Change: $" + change.toFixed(2));
        }

        $("#customer-payment").on("input", function () {
            calculateChange();
        });

        $("#checkoutForm").submit(function (event) {
            event.preventDefault();
            $.post("/Home/HandleCheckout", $(this).serialize(), function (data) {

                if (data.existingCustomer === true) {
                    $("#fullname").val(data.existingName);
                    $("#address").val(data.existingAddress);
                    showMessage("Existing customer information loaded.", 'red');
                } else {
                    showMessage("Customer does not exist. Create a new one.", 'red');
                }
            });
            calculateChange();
        });

        $(".add-to-cart-btn").on("click", function () {
            var productInfo = $(this).siblings("p").text();
            var productPrice = parseFloat(productInfo.match(/\$([0-9,]+(\.[0-9]{1,2})?)/)[1]);
            var productName = productInfo.replace(/\s*\-\s*\$[0-9,]+(\.[0-9]{1,2})?/, "");
            var productImage = $(this).siblings("img").attr("src");
            var productId = $(this).closest('.product-item').data('product-id');



            var existingCartItem = $(".cart-item").filter(function () {
                return $(this).find('.product-name').text().includes(productName);
            });

            if (existingCartItem.length > 0) {
                var existingQuantity = parseInt(existingCartItem.find('.quantity').text());
                existingCartItem.find('.quantity').text(existingQuantity + 1);
            } else {
                $("#cart-details").append(
                    '<div class="cart-item">' +
                    '<img src="' + productImage + '" alt="' + productName + '" style="width: 3cm; height: 2cm;">' +
                    '<div>' +
                    '<p class="product-name">' + productName + ' - $' + productPrice.toFixed(2) + '</p>' +
                    '<p class="quantity">1</p>' +
                    '<p class = "product-id" hidden>' + productId + '</p>' +
                    '</div>' +
                    '<span class="delete-icon" onclick="removeCartItem(this)">&#128465;</span>' +
                    '</div>'
                );
            }
            updateCartTotals();
        });
        $("#checkout-btn").on("click", function () {
            var cartItems = [];

            $(".cart-item").each(function () {
                var $cartItem = $(this);
                $cartItem.find('.product-name').each(function () {
                    var productNameWithPrice = $(this).text();
                    var quantity = parseInt($cartItem.find('.quantity').text());
                    var id = parseInt($cartItem.find('.product-id').text());

                    // Extract product name and price separately
                    var matches = productNameWithPrice.match(/^(.*?) - \$(\d+(\.\d{1,2})?)$/);
                    var productName = matches[1];
                    var itemPrice = parseFloat(matches[2]);
                    var totalPrice = itemPrice * quantity;

                    cartItems.push({
                        productName: productName,
                        quantity: quantity,
                        totalPrice: totalPrice,
                        productId: id
                    });
                });
            });
            var customerPhone = $("#phone").val();
            var customerPayment = parseFloat($("#customer-payment").val()) || 0;
            createBill(cartItems, customerPayment, customerPhone);

        });
        $("#addNewCustomer").click(function () {
            var phone = $("#phone").val();
            var name = $("#fullname").val();
            var address = $("#address").val();

            $.post("/Home/CreateCustomer", { phone: phone, name: name, address: address }, function (result) {
                if (result.success === true) {
                    showMessage("New customer added successfully!", 'green');
                } else {
                    showMessage("Error adding a new customer. " + result.errorMessage, 'red');
                }
            });
        });

        function showMessage(message, color) {
            $("#messageContainer").text(message).css('color', color);
        }


    });

    function removeCartItem(element) {
        if (parseInt($(element).closest(".cart-item").find('.quantity').text()) > 1) {
            $(element).closest(".cart-item").find('.quantity').text(parseInt($(element).closest(".cart-item").find('.quantity').text()) - 1);
        } else {
            $(element).closest(".cart-item").remove();
        }
        // Update the total items and total price after removing an item
        updateCartTotals();
    }

    function updateCartTotals() {
        var totalItems = 0;
        var totalPrice = 0;

        $(".cart-item").each(function () {
            var quantity = parseInt($(this).find('.quantity').text());
            var priceText = $(this).find('.product-name').text().match(/\$([0-9,]+(\.[0-9]{1,2})?)/)[1];
            var itemPrice = parseFloat(priceText);

            totalItems += quantity;
            totalPrice += itemPrice * quantity;
        });

        $("#total-items-text").text("Total Items: " + totalItems);
        $("#total-price-text").text("Total Price: $" + totalPrice.toFixed(2));
    }

    function createBill(cartItems, customerPayment, customerPhone) {
        var backendEndpoint = "/Home/CreateBill";

        if (!Array.isArray(cartItems)) {
            console.error("Invalid cart items format");
            return;
        }

        var selectedPaymentMethod = $("#payment-method").val();

        var requestData = {
            cartItems: cartItems,
            customerPayment: customerPayment,
            customerPhone: customerPhone,
            paymentMethod: selectedPaymentMethod
        };

        $.ajax({
            type: "POST",
            url: backendEndpoint,
            contentType: "application/json",
            data: JSON.stringify(requestData),
            success: function (response) {
                console.log("Bill created successfully:", response);
                if (response.success) {
                    displayInvoiceModal(response.invoiceDetails);
                }

            },
            error: function (error) {
                console.error("Error creating bill:", error);
            }
        });
    }
</script>




